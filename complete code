#include <HardwareSerial.h>
#include "DFRobot_RainfallSensor.h"
#include <WiFi.h>
#include <WiFiManager.h>
#include "ThingSpeak.h"
#include <Adafruit_SHT4x.h>
#include <Adafruit_BMP3XX.h>
#include <DS3232.h>
#include <mySD.h>
#include <Wire.h>
#include "LoRaWan_APP.h"

#define RXD1 3   // RX for wind sensor
#define TXD1 1   // TX for wind sensor
#define RXD2 19  // RX for GSM module
#define TXD2 20  // TX for GSM module

// SPI pin definitions for SD Card module
#define SD_CS 45
#define SD_MOSI 39
#define SD_MISO 40
#define SD_SCK 46

// LoRa configuration
#define RF_FREQUENCY                915000000  // Hz (915MHz)
#define TX_OUTPUT_POWER             20         // Max power (dBm)
#define LORA_BANDWIDTH              0          // 125 kHz
#define LORA_SPREADING_FACTOR       12         // SF12 (max range)
#define LORA_CODINGRATE             1          // 4/5
#define LORA_PREAMBLE_LENGTH        8          
#define LORA_SYMBOL_TIMEOUT         0          
#define LORA_FIX_LENGTH_PAYLOAD_ON  false
#define LORA_IQ_INVERSION_ON        false
#define BUFFER_SIZE                 100

#define MODE_BUTTON 48
#define INTERVAL_BUTTON 47
#define STATUS_LED 26

HardwareSerial air780eSerial(2);  // UART2 for GSM module
DFRobot_RainfallSensor_I2C rain(&Wire);
Adafruit_SHT4x sht;
Adafruit_BMP3XX bmp;
DS3232 rtc;
ext::File dataFile;

static RadioEvents_t RadioEvents;
char txpacket[BUFFER_SIZE];
unsigned long lastTxTime = 0;
const unsigned long TX_INTERVAL = 600000; // 10 minutes

byte ByteArrayVane16[8];
byte ByteArrayAnemo[8];
int wind_direction = 0;
float wind_speed = 0;
float maxGust = 0;
float sWS = 0; 
int ind = 0;
int prev = 0;
float avgWS = 0;
int N,NE,E,SE,S,SW,W,NW;
String direction[]={"N", "NE", "E", "SE", "S", "SW", "W", "NW"};
int l;
int k = 1; // default to WiFi mode

// month names for folder naming
const char* months[] = {
  "Invalid", "January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
};

WiFiClient client;
WiFiManager wifiManager;

unsigned long CHANNEL = 2846120; // Station A Channel ID
const char* API_KEY = "YSSRKVV3PAT4U66Q"; // Station A Write API
// unsigned long CHANNEL = 2919932; // Station B Channel ID
// const char* API_KEY = "6F7WYA6VT3U95K26"; // Station B Write API

// Button handling variables for mode button
unsigned long lastModeButtonPress = 0;
unsigned long buttonDebounceDelay = 300;
int currentModeIndex = 0; // 0=WiFi, 1=GSM, 2=LoRa

// Button handling variables for interval button
unsigned long lastIntervalButtonPress = 0;
int currentIntervalIndex = 2; // 0=1min, 1=5min, 2=10min (default)

// Available intervals in milliseconds
const unsigned long intervals[] = {60000, 300000, 600000}; // 1, 5, 10 minutes
const char* modeNames[] = {"WiFi", "GSM", "LoRa"};
const char* intervalNames[] = {"1 minute", "5 minutes", "10 minutes"};
const unsigned long GSM_OFFSET = 60000;

unsigned long delay1 = 1000;
unsigned long delay2 = intervals[2]; // default delay (10 minutes)
unsigned long time1 = millis();
unsigned long time2 = millis();

void setup() {
  Serial.begin(9600);
  while (!Serial);
  Wire.begin();
  air780eSerial.begin(9600, SERIAL_8N1, RXD2, TXD2);
  Serial1.begin(9600, SERIAL_8N1, RXD1, TXD1); // UART1 for Wind Sensors
  Serial1.setTimeout(1000);
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);
  initLoRa();
  Serial.println("ATLAS: Automated Local Weather Sentry");
  delay(5000);
  initRTC();
  initSensors();
  initSD();
  getWS();
  delay(100);
  getWD8();
  if (!initGSM()) {
    while (1);
  }
  setupButtons();
  wifiManager.resetSettings();
  wifiManager.setTimeout(180);
  if (!wifiManager.autoConnect("WeatherStationAP")) {
    Serial.println("Failed to connect to WiFi. Switching to GSM mode...");
    k = 2;  // Switch to GSM mode
    currentModeIndex = 1;  // Update mode index to match
    Serial.println("Now operating in GSM mode.");
  } else {
    Serial.println("Connected to WiFi!");
    k = 1;  // WiFi mode
    currentModeIndex = 0;  // Update mode index to match
  }  
  Serial.println("Connected!");
  Serial.println("System initialized in " + String(modeNames[currentModeIndex]) + " mode.");
  Serial.println("Now fetching data.");
  
  for (int i = 0; i < 2; i++) {
    digitalWrite(STATUS_LED, HIGH);
    delay(300);
    digitalWrite(STATUS_LED, LOW);
    delay(300);
  }}

void loop() {
  handleModeButton();
  handleIntervalButton();
  
  if((millis()-time2) > delay2){
    rtc.read();
    sensors_event_t hum, temp;
    sht.getEvent(&hum, &temp);
    if (!bmp.performReading()) {
      Serial.println("Failed BMP reading");
      delay(1000);
      return;
    }
    //readings
    float T = temp.temperature;
    float H = hum.relative_humidity;
    float P = bmp.pressure/100;
    int tip = rain.getRawData();
    float R = (tip - prev)*0.2794;
    float heatIndex = getHeatIndex(T,H);

    //Wind Readings
    avgWS = sWS/ind;
       
    Serial.println("--------");
    Serial.print(String(rtc.month()) + "." + String(rtc.day()) + "." + String(rtc.year()) + "   ");
    Serial.println(String(rtc.hours()) + ":" + String(rtc.minutes()) + ":" + String(rtc.seconds()) + "   ");
    Serial.println("Average Wind Speed: " + String(avgWS) + " m\s");
    Serial.println("Prevailing Wind Direction: " + direction[wind_direction]);
    Serial.println("Heat Index: " + String(heatIndex) + " °C");
    Serial.print("Temp: " + String(T) + "°C\t");
    Serial.print("Hum: " + String(H) + "%\t");
    Serial.println("Pressure: " + String(P) + " hPa");
    Serial.print("1-Hr Rain:\t" + String(R) + " mm\t\t");
    Serial.println("Tips:\t" + String((tip-prev)));

    // Handle WiFi/GSM upload logic
    bool uploadSuccessful = false;
    int attempts = 0;

    while (!uploadSuccessful && attempts < 3) {
      if (k == 1) {  // WiFi mode
        uploadSuccessful = uploadViaWiFi(avgWS, wind_direction, maxGust, T, H, P, R, heatIndex);
      } else if (k == 2) {  // GSM mode
        uploadSuccessful = uploadViaGSM(avgWS, wind_direction, maxGust, T, H, P, R, heatIndex);
      } else if (k == 3) { // LoRa mode
        // For LoRa mode, just attempt once and don't retry with other methods
        uploadViaLoRa(avgWS, wind_direction, maxGust, T, H, P, R, heatIndex);
        uploadSuccessful = true; // Don't retry with other methods if LoRa is selected
      }
      
      if (!uploadSuccessful) {
        attempts++;
        Serial.print("Upload failed, attempt ");
        Serial.println(attempts);
        if (k == 1) {
          Serial.println("Switching to GSM...");
          k = 2;  // Switch to GSM mode
        } else if (k == 2) {
          Serial.println("Switching to WiFi...");
          k = 1;  // Switch back to WiFi mode
          // Note: We don't try LoRa as a fallback anymore
        }
      }
    }   
    
    delay(100);
    sendtoSD(avgWS, wind_direction, maxGust, T, H, P, R, heatIndex);
    prev = tip;
    sWS = 0;
    ind = 0;
    maxGust = 0;
    N=NE=E=SE=S=SW=W=NW=0;
    time1 = millis();
    time2 = millis();
  }

  if((millis()-time1) > delay1){
    wind_speed = getWS();
    maxGust = (wind_speed > maxGust)? wind_speed : maxGust;
    delay(100);
    wind_direction = getWD8();
    sWS += wind_speed;
    ind++;
    Serial.print("Wind Speed: ");
    Serial.println(wind_speed, 2);   
    Serial.print("Wind Direction: ");
    Serial.println(wind_direction);   
    time1 = millis();
  }
  Radio.IrqProcess();
}

void initRTC() {
  if (rtc.begin() != DS3232_OK) {
    Serial.println("Couldn't find RTC");
    while (1);
  }
}

void initSensors() {
  // Initialize SHT45
  while (!sht.begin()) {
    Serial.println("Couldn't find SHT45. Retrying...");
    delay(1000);
  }
  sht.setPrecision(SHT4X_HIGH_PRECISION);
  sht.setHeater(SHT4X_NO_HEATER);

  // Initialize BMP390
  while (!bmp.begin_I2C()) {
    Serial.println("Couldn't find BMP390. Retrying...");
    delay(1000);
  }
  bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
  bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
  bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
  bmp.setOutputDataRate(BMP3_ODR_50_HZ);
  bmp.performReading();

  // Initialize Rain Gauge
  while (!rain.begin()) {
    Serial.println("Couldn't find Rain Gauge. Retrying...");
    delay(1000);
  }
}  

void initSD() {
  Serial.print("Initializing SD card...");
  if (!SD.begin(SD_CS, SD_MOSI, SD_MISO, SD_SCK)) {
    Serial.println("SD card initialization failed.");
    while (1);
  }
  Serial.println("SD card ready.");
}

void sendtoSD(float windspeed, int winddirection, float maxGust, float temperature, float humidity, float pressure, float rainfall, float heatIndex) {
  int year = rtc.year();
  int month = rtc.month();
  int day = rtc.day();
  const char* monthName = months[month];

  char timestamp[16];
  sprintf(timestamp, "%02d:%02d:%02d", rtc.hours(), rtc.minutes(), rtc.seconds());

  char yearFolder[16];
  sprintf(yearFolder, "/%d", year);
  char monthFolder[32];
  sprintf(monthFolder, "%s/%s", yearFolder, monthName);
  char filePath[48];
  char fileName[16];
  sprintf(fileName, "%.3s%02d.txt", monthName, day);
  sprintf(filePath, "%s/%s", monthFolder, fileName);

  if (!SD.exists(yearFolder)) SD.mkdir(yearFolder);
  if (!SD.exists(monthFolder)) SD.mkdir(monthFolder);

  String dataLine = String(timestamp) + " ";
  dataLine += String(windspeed, 2) + " ";
  dataLine += String(winddirection, 2) + " ";
  dataLine += String(maxGust, 2) + " ";
  dataLine += String(temperature, 2) + " ";
  dataLine += String(humidity, 2) + " ";
  dataLine += String(pressure, 2) + " ";
  dataLine += String(rainfall, 2) + " ";
  dataLine += String(heatIndex, 2); 

  bool fileExists = SD.exists(filePath);
  dataFile = SD.open(filePath, FILE_WRITE);
  if (dataFile) {
    if (dataFile.size() == 0) {
      dataFile.println("Time, Wind Speed, Wind Direction,Temperature, Humidity, Pressure, Rainfall, Heat Index");
    }
    dataFile.println(dataLine);
    dataFile.close();
    Serial.println("Data written to SD card successfully.");
  } else {
    Serial.print("Error opening file: ");
    Serial.println(filePath);
  }
}

bool initGSM() {
    Serial.println("Initializing GSM module...");
    while (true) {
      air780eSerial.println("AT");
      delay(250);
      if (checkResponse("OK")) {
        return true;
      }
      Serial.println("No response, retrying...");
    }
}

bool checkGSMConnection() {
  air780eSerial.println("AT+CREG?");
  delay(1000);
  return checkResponse("+CREG: 0,1") || checkResponse("+CREG: 0,5");
}

bool checkResponse(String expected) {
  String response = "";
  unsigned long startTime = millis();

  while (millis() - startTime < 5000) {
    if (air780eSerial.available()) {
      char c = air780eSerial.read();
      response += c;
    }
  }

  Serial.println("GSM Response: " + response);
  return response.indexOf(expected) != -1;
}

void GSMtoThingSpeak(float wind_speed, int wind_direction, float maxGust, float temperature, float humidity, float pressure, float rainfall, float heatIndex) {
  Serial.println("Configuring GPRS Connection.");

  air780eSerial.println("AT+SAPBR=0,1"); 
  delay(2000);
  checkResponse("OK");

  air780eSerial.println("AT+SAPBR=3,1,\"Contype\",\"GPRS\""); 
  delay(1000);
  checkResponse("OK");
  air780eSerial.println("AT+SAPBR=3,1,\"APN\",\"internet\"");
  delay(2000);
  checkResponse("OK");

  air780eSerial.println("AT+SAPBR=1,1"); // Open GPRS session
  delay(3000);
  checkResponse("OK");

  air780eSerial.println("AT+HTTPINIT");
  delay(1000);
  checkResponse("OK");

  String url = "api.thingspeak.com/update?api_key=" + String(API_KEY) +
               "&field1=" + String(avgWS) +
               "&field2=" + String(wind_direction) +
               "&field3=" + String(maxGust) +
               "&field4=" + String(temperature) +
               "&field5=" + String(humidity) +
               "&field6=" + String(pressure) +
               "&field7=" + String(rainfall) +
               "&field8=" + String(heatIndex); 

  air780eSerial.print("AT+HTTPPARA=\"URL\",\"");
  air780eSerial.print(url);
  air780eSerial.println("\"");
  delay(1000);
  checkResponse("OK");

  air780eSerial.println("AT+HTTPACTION=0");
  delay(6000);

  if (checkResponse("+HTTPACTION: 0,200,")) {
    Serial.println("Data sent to ThingSpeak successfully.");
  } else {
    Serial.println("HTTPACTION failed. Check logs.");
  }

  air780eSerial.println("AT+HTTPTERM");
  delay(500);
}

bool uploadViaWiFi(float wind_speed, int wind_direction, float maxGust, float temperature, float humidity, float pressure, float rainfall, float heatIndex) {
  int responseCode = 0;
  int attemptCount = 0;
  
  while (attemptCount < 3) {
    // WiFi Upload Logic
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("Attempting to connect to WiFi...");
      while (WiFi.status() != WL_CONNECTED) {
        WiFi.begin();
        delay(1000);
      }
      Serial.println("Connected to WiFi.");
    }
    
    ThingSpeak.setField(1, wind_speed);
    ThingSpeak.setField(2, wind_direction);
    ThingSpeak.setField(3, maxGust);
    ThingSpeak.setField(4, temperature);
    ThingSpeak.setField(5, humidity);
    ThingSpeak.setField(6, pressure);
    ThingSpeak.setField(7, rainfall);
    ThingSpeak.setField(8, heatIndex);

    responseCode = ThingSpeak.writeFields(CHANNEL, API_KEY);
    if (responseCode == 200) {
      Serial.println("Data uploaded successfully via WiFi.");
      return true;
    } else {
      Serial.print("Failed to upload data via WiFi. HTTP error code: ");
      Serial.println(responseCode);
      attemptCount++;
      delay(5000);  // Wait before retrying
    }
  }
  return false;
}

bool uploadViaGSM(float wind_speed, int wind_direction, float maxGust, float temperature, float humidity, float pressure, float rainfall, float heatIndex) {
  int responseCode = 0;
  int attemptCount = 0;

  while (attemptCount < 3) {
    // GSM Upload Logic
    if (!checkGSMConnection()) {
      Serial.println("GSM Disconnected, attempting to reconnect.");
      initGSM();
    }

    GSMtoThingSpeak(wind_speed, wind_direction, maxGust, temperature, humidity, pressure, rainfall, heatIndex);
    responseCode = 200; // Placeholder for success
    if (responseCode == 200) {
      Serial.println("Data uploaded successfully via GSM.");
      return true;
    } else {
      Serial.println("Failed to upload data via GSM.");
      attemptCount++;
      delay(5000);  // Wait before retrying
    }
  }
  return false;
}

bool uploadViaLoRa(float wind_speed, int wind_direction, float maxGust, 
                 float temperature, float humidity, float pressure, 
                 float rainfall, float heatIndex) {
  // Format the data as a CSV string
  snprintf(txpacket, BUFFER_SIZE, 
           "%.1f,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",
           wind_speed, wind_direction, maxGust, temperature, 
           humidity, pressure, rainfall, heatIndex);
  
  Serial.printf("[LoRa TX] Sending: %s\n", txpacket);
  Radio.Send((uint8_t *)txpacket, strlen(txpacket));
  lastTxTime = millis();
  return true;  // Assume successful since we don't get immediate feedback
}

float getWS(){
    byte msgAnemo[] = {0x02,0x03,0x00,0x00,0x00,0x01,0x84,0x39};
    int i;
    int len=8;
  
    for(i=0; i<len; i++){
      Serial1.write(msgAnemo[i]);
      }

    delay(100);

    int a = 0;
    while(Serial1.available()){
      ByteArrayAnemo[a]=Serial1.read();
      a++;
      }

    float WSM = ((ByteArrayAnemo[3]<<8) + ByteArrayAnemo[4])*0.10;
    return WSM;
}

int getWD8(){
      byte msgVane8[] = {0x03,0x03,0x00,0x00,0x00,0x01,0x85,0xE8};
      int i;
      int len=8; 
      for(i = 0 ; i < len ; i++){ 
          Serial1.write(msgVane8[i]);  
      }
      delay(100);
      int a = 0;
        while(Serial1.available()) {
        ByteArrayVane16[a] = Serial1.read();
        a++;
        }
      float angle = ((ByteArrayVane16[3] << 8) + ByteArrayVane16[4])*0.10;
      int wd8 = int((angle + 22.5)/45) % 8;
      Serial.print("Angle: ");
      Serial.println(angle, 2);
      Serial.print("Current index: ");
      Serial.println(wd8);
      switch(wd8){
        case 0:
          N++;
          break;
        case 1:
          NE++;
          break;
        case 2:
          E++;
          break;
        case 3:
          SE++;
          break;
        case 4:
          S++;
          break;
        case 5:
          SW++;
          break;
        case 6:
          W++;
          break;
        case 7:
          NW++;
          break;
        }
      int Comp[8]={N,NE,E,SE,S,SW,W,NW};
      int z = 0;
      int j =0 ;
      for(int i=0 ; i < 8 ; i++){
        if (z > Comp[i]){
        z = z;
        }
        else{
          z = Comp[i];
          j = i;
        }
      }
    return j;
}

float getHeatIndex(float T, float RH) {
  // Rothfusz regression formula for heat index
   float HI = -8.78469475556 + 1.61139411 * T + 2.33854883889 * RH
             - 0.14611605 * T * RH - 0.012308094 * T * T
             - 0.0164248277778 * RH * RH + 0.002211732 * T * T * RH
             + 0.00072546 * T * RH * RH - 0.000003582 * T * T * RH * RH;
  return HI;
}

void initLoRa(){
  Mcu.begin(HELTEC_BOARD, SLOW_CLK_TPYE);
  Serial.println("\nATLAS: Automated Local Weather Sentry [LoRa Version]");
  printLoRaConfig();
  RadioEvents.TxDone = OnTxDone;
  Radio.Init(&RadioEvents);
  Radio.SetChannel(RF_FREQUENCY);
  Radio.SetTxConfig(
    MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
    true, 0, 0, LORA_IQ_INVERSION_ON, 3000
  );
}

void OnTxDone(void) {
  Serial.println("[LoRa] Packet sent successfully");
}

void printLoRaConfig() {
  Serial.println("LoRa Settings:");
  Serial.printf("Frequency: %.1f MHz | Power: %d dBm\n", RF_FREQUENCY/1e6, TX_OUTPUT_POWER);
  Serial.printf("SF%d | BW: 125 kHz | CR: 4/5\n", LORA_SPREADING_FACTOR);
}

void setupButtons() {
  pinMode(MODE_BUTTON, INPUT_PULLUP);      // Use internal pull-up resistor for mode button
  pinMode(INTERVAL_BUTTON, INPUT_PULLUP);  // Use internal pull-up resistor for interval button
  pinMode(STATUS_LED, OUTPUT);             // Set LED pin as output
  digitalWrite(STATUS_LED, LOW);           // Ensure LED is off at startup
  
  Serial.println("Mode selection button initialized on pin " + String(MODE_BUTTON));
  Serial.println("Interval selection button initialized on pin " + String(INTERVAL_BUTTON));
  Serial.println("Status LED initialized on pin " + String(STATUS_LED));
  Serial.println("Current transmission mode: " + String(modeNames[currentModeIndex]));
  Serial.println("Current measurement interval: " + String(intervalNames[currentIntervalIndex]));
}

void handleModeButton() {
  int buttonState = digitalRead(MODE_BUTTON);  
  
  // Turn LED on when button is pressed, off when released
  if (buttonState == LOW) {
    digitalWrite(STATUS_LED, HIGH);  // Turn LED on when button is pressed
    
    // Only change mode once per press (with debounce)
    if (millis() - lastModeButtonPress > buttonDebounceDelay) {
      // Cycle to next mode (0->1->2->0)
      currentModeIndex = (currentModeIndex + 1) % 3;      
      k = currentModeIndex + 1;
      
      if (currentModeIndex == 1 && currentIntervalIndex == 0) {
        currentIntervalIndex = 1;  // Change to 5-minute interval
        Serial.println("Automatically changing interval to 5 minutes for GSM mode");
      }
      
      adjustIntervalForMode();
      Serial.print("Mode changed to: ");
      Serial.println(modeNames[currentModeIndex]);
      lastModeButtonPress = millis();
    }
  } 
  else {
    digitalWrite(STATUS_LED, LOW);
  }
}

void handleIntervalButton() {
  int buttonState = digitalRead(INTERVAL_BUTTON);  
  
  if (buttonState == LOW) {
    digitalWrite(STATUS_LED, HIGH);
    
    // Only change interval once per press (with debounce)
    if (millis() - lastIntervalButtonPress > buttonDebounceDelay) {
      // Cycle to next interval (0->1->2->0)
      currentIntervalIndex = (currentIntervalIndex + 1) % 3;
      
      // If in GSM mode and 1-minute interval is selected, skip to 5-minute
      if (currentModeIndex == 1 && currentIntervalIndex == 0) {
        currentIntervalIndex = 1;  // Skip to 5-minute interval
      }
      
      delay2 = intervals[currentIntervalIndex];      
      adjustIntervalForMode();
      Serial.print("Interval changed to: ");
      Serial.println(intervalNames[currentIntervalIndex]);
      lastIntervalButtonPress = millis();
    }
  }
  else {
    digitalWrite(STATUS_LED, LOW); 
  }
}
void adjustIntervalForMode() {
  unsigned long baseInterval = intervals[currentIntervalIndex];
  
  if (currentModeIndex == 1) { // GSM mode (index 1)
    if (currentIntervalIndex > 0) { // Only for 5-min and 10-min intervals
      delay2 = baseInterval - GSM_OFFSET;
      Serial.printf("GSM mode: Adjusted interval from %lu to %lu ms\n", 
                    baseInterval, delay2);
    }
  } else {
    // For WiFi or LoRa mode, use the regular interval
    delay2 = baseInterval;
    Serial.printf("%s mode: Using standard interval of %lu ms\n", 
                 modeNames[currentModeIndex], delay2);
  }
}
